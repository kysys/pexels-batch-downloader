<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pexels Batch Image Downloader</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
        }

        .search-form {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            align-items: center;
            flex-wrap: wrap;
        }

        .csv-section {
            background: #e8f5e8;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 4px solid #28a745;
        }

        .csv-preview {
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
            max-height: 200px;
            overflow-y: auto;
        }

        .batch-controls {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e1e5e9;
            border-radius: 4px;
            overflow: hidden;
            margin: 15px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #28a745, #20c997);
            width: 0%;
            transition: width 0.3s ease;
        }

        .batch-status {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            border: 1px solid #e1e5e9;
        }

        .input-group {
            flex: 1;
            min-width: 200px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }

        input, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }

        .search-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: transform 0.2s ease;
            align-self: end;
        }

        .search-btn:hover {
            transform: translateY(-2px);
        }

        .search-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .api-key-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 4px solid #667eea;
        }

        .api-key-section h3 {
            color: #333;
            margin-bottom: 10px;
        }

        .results {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .photo-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .photo-card:hover {
            transform: translateY(-5px);
        }

        .photo-card img {
            width: 100%;
            height: 250px;
            object-fit: cover;
        }

        .photo-info {
            padding: 15px;
        }

        .photo-title {
            font-weight: 600;
            margin-bottom: 8px;
            color: #333;
        }

        .photographer {
            color: #666;
            font-size: 14px;
            margin-bottom: 15px;
        }

        .download-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            margin-right: 10px;
            transition: background 0.3s ease;
        }

        .download-btn:hover {
            background: #218838;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            border: 1px solid #f5c6cb;
        }

        .demo-key-warning {
            background: #fff3cd;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            border: 1px solid #ffeaa7;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üì∏ Pexels Batch Image Downloader</h1>
        
        <div class="api-key-section">
            <h3>API Key Setup</h3>
            <div class="input-group">
                <label for="apiKey">Pexels API Key:</label>
                <input type="password" id="apiKey" placeholder="Enter your Pexels API key here">
            </div>
            <div class="demo-key-warning">
                <strong>Need an API key?</strong> Visit <a href="https://www.pexels.com/api/" target="_blank">pexels.com/api</a> to get your free API key
            </div>
        </div>

        <div class="csv-section">
            <h3>üìã Batch Keywords & Filenames</h3>
            <p>Enter keywords and filenames (one per line): <strong>keyword,filename</strong></p>
            
            <div class="input-group">
                <label for="batchInput">Batch Input (keyword,filename per line):</label>
                <textarea id="batchInput" rows="8" placeholder="nature,mountain_landscape
ocean,blue_sea
sunset,golden_hour
forest,green_trees
city,urban_scene" style="width: 100%; padding: 12px; border: 2px solid #e1e5e9; border-radius: 8px; font-family: monospace; font-size: 14px; line-height: 1.5;"></textarea>
            </div>
            
            <div id="batchPreview" class="csv-preview" style="display: none;"></div>
            
            <div class="batch-controls">
                <div class="input-group" style="min-width: 150px;">
                    <label for="imagesPerKeyword">Images per keyword:</label>
                    <select id="imagesPerKeyword">
                        <option value="1">1 image</option>
                        <option value="3" selected>3 images</option>
                        <option value="5">5 images</option>
                        <option value="10">10 images</option>
                    </select>
                </div>
                
                <button id="batchDownloadBtn" class="search-btn" style="background: #28a745;" disabled>
                    üöÄ Save Images to Server
                </button>
            </div>

            <div class="progress-bar" id="progressBar" style="display: none;">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            
            <div id="batchStatus" class="batch-status" style="display: none;"></div>
        </div>

        <form class="search-form" id="searchForm">
            <div class="input-group">
                <label for="searchQuery">Single Search (Optional):</label>
                <input type="text" id="searchQuery" placeholder="e.g., nature, ocean, city">
            </div>
            
            <div class="input-group">
                <label for="imageCount">Number of Images:</label>
                <select id="imageCount">
                    <option value="5">5 images</option>
                    <option value="10" selected>10 images</option>
                    <option value="15">15 images</option>
                </select>
            </div>
            
            <button type="submit" class="search-btn" id="searchBtn">
                üîç Search Single Keyword
            </button>
        </form>

        <div id="results" class="results"></div>
    </div>

    <script>
        class PexelsAPI {
            constructor(apiKey) {
                this.apiKey = apiKey;
                this.baseUrl = 'https://api.pexels.com/v1';
                this.headers = {
                    'Authorization': apiKey
                };
            }

            async searchPhotos(query, perPage = 15, page = 1) {
                try {
                    // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢ (photos) ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (landscape)
                    const url = `${this.baseUrl}/search?query=${encodeURIComponent(query)}&per_page=${perPage}&page=${page}&orientation=landscape`;
                    
                    const response = await fetch(url, {
                        headers: this.headers
                    });

                    if (response.ok) {
                        const data = await response.json();
                        // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ photos (Pexels API ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô photos ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
                        return data;
                    } else {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                } catch (error) {
                    console.error('Error searching photos:', error);
                    throw error;
                }
            }

            // Save image to server directory instead of downloading
            async downloadImage(imageUrl, filename) {
                return new Promise(async (resolve) => {
                    try {
                        // Fetch image from Pexels
                        const response = await fetch(imageUrl);
                        const blob = await response.blob();
                        
                        // Create FormData to send to server
                        const formData = new FormData();
                        formData.append('image', blob, filename);
                        formData.append('filename', filename);
                        
                        // Send to server to save in /download directory
                        const uploadResponse = await fetch('save_image.php', {
                            method: 'POST',
                            body: formData
                        });
                        
                        if (uploadResponse.ok) {
                            const result = await uploadResponse.text();
                            console.log(`Image saved to server: ${filename}`);
                        } else {
                            throw new Error(`Server error: ${uploadResponse.status}`);
                        }
                        
                        setTimeout(resolve, 100);
                        
                    } catch (error) {
                        console.error('Error saving image to server:', error);
                        resolve();
                    }
                });
            }
        }

        // DOM elements
        const searchForm = document.getElementById('searchForm');
        const searchBtn = document.getElementById('searchBtn');
        const resultsDiv = document.getElementById('results');
        const apiKeyInput = document.getElementById('apiKey');
        const searchQueryInput = document.getElementById('searchQuery');
        const imageCountSelect = document.getElementById('imageCount');
        
        // Batch elements
        const batchInput = document.getElementById('batchInput');
        const batchPreview = document.getElementById('batchPreview');
        const batchDownloadBtn = document.getElementById('batchDownloadBtn');
        const imagesPerKeywordSelect = document.getElementById('imagesPerKeyword');
        const progressBar = document.getElementById('progressBar');
        const progressFill = document.getElementById('progressFill');
        const batchStatus = document.getElementById('batchStatus');

        // State
        let pexelsAPI = null;
        let batchData = [];
        let batchInProgress = false;

        // Event listeners
        searchForm.addEventListener('submit', handleSearch);
        batchInput.addEventListener('input', handleBatchInputChange);
        batchDownloadBtn.addEventListener('click', handleBatchDownload);

        // Batch input change handler
        function handleBatchInputChange() {
            const inputText = batchInput.value.trim();
            if (!inputText) {
                batchPreview.style.display = 'none';
                batchDownloadBtn.disabled = true;
                return;
            }

            // Parse input text
            const lines = inputText.split('\n').filter(line => line.trim());
            batchData = lines.map(line => {
                const parts = line.split(',').map(part => part.trim());
                return [parts[0] || '', parts.slice(1).join(',') || ''];
            });

            displayBatchPreview(batchData);
            batchDownloadBtn.disabled = batchData.length === 0;
        }

        function displayBatchPreview(data) {
            if (data.length === 0) {
                batchPreview.style.display = 'none';
                return;
            }

            const validData = data.filter(row => row[0] && row[1]);
            const invalidData = data.filter(row => !row[0] || !row[1]);

            const previewHTML = `
                <h4>üìÑ Batch Preview (${validData.length} valid entries)</h4>
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr style="background: #f8f9fa;">
                            <th style="border: 1px solid #ddd; padding: 8px;">Keyword</th>
                            <th style="border: 1px solid #ddd; padding: 8px;">Filename</th>
                            <th style="border: 1px solid #ddd; padding: 8px;">Preview Downloads</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${validData.slice(0, 5).map(row => `
                            <tr>
                                <td style="border: 1px solid #ddd; padding: 8px;">${row[0]}</td>
                                <td style="border: 1px solid #ddd; padding: 8px;">${row[1]}</td>
                                <td style="border: 1px solid #ddd; padding: 8px; font-size: 12px; color: #666;">
                                    ${row[1]}_1.jpg, ${row[1]}_2.jpg, ${row[1]}_3.jpg...
                                </td>
                            </tr>
                        `).join('')}
                        ${validData.length > 5 ? `<tr><td colspan="3" style="text-align: center; padding: 8px; color: #666;">... and ${validData.length - 5} more valid entries</td></tr>` : ''}
                        ${invalidData.length > 0 ? `<tr><td colspan="3" style="text-align: center; padding: 8px; color: #e74c3c; background: #fdf2f2;"><strong>‚ö†Ô∏è ${invalidData.length} invalid entries (missing keyword or filename)</strong></td></tr>` : ''}
                    </tbody>
                </table>
            `;
            
            batchPreview.innerHTML = previewHTML;
            batchPreview.style.display = 'block';
        }

        // Batch download handler
        async function handleBatchDownload() {
            const apiKey = apiKeyInput.value.trim();
            
            if (!apiKey) {
                showError('Please enter your Pexels API key');
                return;
            }

            const validData = batchData.filter(row => row[0] && row[1]);
            if (validData.length === 0) {
                showError('Please enter valid batch data (keyword,filename per line)');
                return;
            }

            pexelsAPI = new PexelsAPI(apiKey);
            batchInProgress = true;
            batchDownloadBtn.disabled = true;
            batchDownloadBtn.textContent = '‚è≥ Processing...';
            
            progressBar.style.display = 'block';
            batchStatus.style.display = 'block';
            
            const imagesPerKeyword = parseInt(imagesPerKeywordSelect.value);
            let processedCount = 0;
            let totalDownloads = 0;
            let errors = [];

            updateBatchStatus(`üöÄ Starting batch processing and saving to server...`);

            for (let i = 0; i < validData.length; i++) {
                const [keyword, filename] = validData[i];
                
                updateBatchStatus(`üîç Processing: ${keyword} (${processedCount + 1}/${validData.length})`);
                
                try {
                    const results = await pexelsAPI.searchPhotos(keyword, imagesPerKeyword);
                    
                    if (results && results.photos && results.photos.length > 0) {
                        updateBatchStatus(`üì∏ Found ${results.photos.length} images for "${keyword}". Saving to server...`);
                        
                        for (let j = 0; j < Math.min(results.photos.length, imagesPerKeyword); j++) {
                            const photo = results.photos[j];
                            const downloadFilename = `${filename}_${j + 1}.jpg`;
                            
                            updateBatchStatus(`üíæ Saving to server: ${downloadFilename}`);
                            
                            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á server directory
                            await pexelsAPI.downloadImage(photo.src.large, downloadFilename);
                            totalDownloads++;
                            
                            // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                            await new Promise(resolve => setTimeout(resolve, 800));
                        }
                    } else {
                        errors.push(`No landscape photos found for keyword: ${keyword}`);
                    }
                } catch (error) {
                    errors.push(`Error processing ${keyword}: ${error.message}`);
                }
                
                processedCount++;
                const progress = (processedCount / validData.length) * 100;
                progressFill.style.width = `${progress}%`;
                
                // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á keyword ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô rate limit
                if (i < validData.length - 1) {
                    updateBatchStatus(`‚è±Ô∏è Waiting before next keyword...`);
                    await new Promise(resolve => setTimeout(resolve, 1500));
                }
            }

            // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
            const summary = `
                <h4>‚úÖ Batch Processing Complete!</h4>
                <p><strong>üìä Summary:</strong></p>
                <ul style="margin: 10px 0; padding-left: 20px;">
                    <li><strong>Processed:</strong> ${processedCount} keywords</li>
                    <li><strong>Saved to server:</strong> ${totalDownloads} images (Large size)</li>
                    <li><strong>Server location:</strong> /download/ directory</li>
                    <li><strong>Format:</strong> filename_1.jpg, filename_2.jpg, etc.</li>
                </ul>
                ${errors.length > 0 ? `
                    <details style="margin-top: 15px;">
                        <summary><strong>‚ö†Ô∏è Issues (${errors.length}):</strong></summary>
                        <ul style="margin: 10px 0; padding-left: 20px; color: #e74c3c;">
                            ${errors.map(error => `<li>${error}</li>`).join('')}
                        </ul>
                    </details>
                ` : ''}
            `;
            
            updateBatchStatus(summary);
            batchInProgress = false;
            batchDownloadBtn.disabled = false;
            batchDownloadBtn.textContent = 'üöÄ Save Images to Server';
        }

        function updateBatchStatus(message) {
            batchStatus.innerHTML = message;
        }

        async function handleSearch(e) {
            e.preventDefault();
            
            const apiKey = apiKeyInput.value.trim();
            const query = searchQueryInput.value.trim();
            const perPage = parseInt(imageCountSelect.value);

            if (!apiKey) {
                showError('Please enter your Pexels API key');
                return;
            }

            if (!query) {
                showError('Please enter a search term');
                return;
            }

            // Initialize API client
            pexelsAPI = new PexelsAPI(apiKey);

            try {
                showLoading();
                const results = await pexelsAPI.searchPhotos(query, perPage);
                displayResults(results);
            } catch (error) {
                showError(`Search failed: ${error.message}`);
            }
        }

        function showLoading() {
            searchBtn.disabled = true;
            searchBtn.textContent = 'üîÑ Searching...';
            resultsDiv.innerHTML = '<div class="loading">Searching for images...</div>';
        }

        function showError(message) {
            searchBtn.disabled = false;
            searchBtn.textContent = 'üîç Search Images';
            resultsDiv.innerHTML = `<div class="error">${message}</div>`;
        }

        function displayResults(results) {
            searchBtn.disabled = false;
            searchBtn.textContent = 'üîç Search Images';

            if (!results || !results.photos || results.photos.length === 0) {
                resultsDiv.innerHTML = '<div class="error">No images found. Try a different search term.</div>';
                return;
            }

            const photosHTML = results.photos.map(photo => `
                <div class="photo-card">
                    <img src="${photo.src.medium}" alt="${photo.alt || 'Photo'}" loading="lazy">
                    <div class="photo-info">
                        <div class="photo-title">${photo.alt || 'Untitled'}</div>
                        <div class="photographer">üì∏ ${photo.photographer}</div>
                        <button class="download-btn" onclick="downloadPhoto('${photo.src.original}', '${photo.photographer}', ${photo.id})">
                            ‚¨áÔ∏è Download Original
                        </button>
                        <button class="download-btn" onclick="downloadPhoto('${photo.src.large}', '${photo.photographer}', ${photo.id}, 'large')">
                            ‚¨áÔ∏è Download Large
                        </button>
                    </div>
                </div>
            `).join('');

            resultsDiv.innerHTML = `
                <div style="grid-column: 1 / -1; text-align: center; margin-bottom: 20px; color: #666;">
                    Found ${results.total_results.toLocaleString()} images. Showing ${results.photos.length} results.
                </div>
                ${photosHTML}
            `;
        }

        function downloadPhoto(imageUrl, photographer, photoId, size = 'original') {
            if (!pexelsAPI) {
                alert('Please search for images first');
                return;
            }

            const cleanPhotographer = photographer.replace(/[^a-zA-Z0-9]/g, '_');
            const filename = `pexels_${cleanPhotographer}_${photoId}_${size}.jpg`;
            
            pexelsAPI.downloadImage(imageUrl, filename);
        }

        // Initialize with demo message
        resultsDiv.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">
                <h3>üöÄ Ready for batch processing!</h3>
                <p><strong>üìù Input Format:</strong> keyword,filename (one per line)</p>
                <p><strong>üì∏ Features:</strong> Landscape photos only, Large size, Auto-numbered</p>
                <p><strong>üíæ Server Storage:</strong> Images will be saved to <code>/download/</code> directory</p>
                <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; text-align: left; max-width: 300px; margin-left: auto; margin-right: auto;">
                    <strong>Example input:</strong><br>
                    <code style="font-family: monospace; font-size: 12px;">
                    nature,mountain_landscape<br>
                    ocean,blue_sea<br>
                    sunset,golden_hour
                    </code>
                </div>
                <div style="margin-top: 15px; padding: 15px; background: #fff3cd; border-radius: 8px; max-width: 400px; margin-left: auto; margin-right: auto;">
                    <strong>üìã Server Setup Required:</strong><br>
                    Create <code>save_image.php</code> to handle image uploads
                </div>
            </div>
        `;
    </script>
</body>
</html>